rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size <= 10 * 1024 * 1024; // 10MB max for images
    }
    
    function isValidVideoFile() {
      return request.resource.contentType.matches('video/.*') &&
             request.resource.size <= 100 * 1024 * 1024; // 100MB max for videos
    }
    
    function isValidMediaFile() {
      return isValidImageFile() || isValidVideoFile();
    }
    
    // User profile images - users can only upload to their own folder
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                   isOwner(userId) && 
                   isValidImageFile() &&
                   fileName.matches('.*\\.(jpg|jpeg|png|webp)$');
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // User media uploads (before being associated with posts)
    match /users/{userId}/uploads/{fileName} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && 
                   isOwner(userId) && 
                   isValidMediaFile();
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Post media - accessible by authenticated users for reading
    match /craftPosts/{userId}/{postId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                   isOwner(userId) &&
                   isValidMediaFile() &&
                   fileName.matches('.*\\.(jpg|jpeg|png|webp|mp4|mov)$');
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Story media - accessible by authenticated users, 24-hour TTL
    match /craftStories/{userId}/{storyId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                   isOwner(userId) &&
                   (isValidMediaFile() || true) && // Temporarily allow all file types for debugging
                   (fileName.matches('.*\\.(jpg|jpeg|png|webp|mp4|mov)$') || true); // Temporarily allow all file names
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Temporary uploads for processing
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && 
                         isOwner(userId) && 
                         isValidMediaFile();
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Thumbnails and processed media - read-only for authenticated users
    match /thumbnails/{allPaths=**} {
      allow read: if isAuthenticated();
      // Write access only for server-side processing
    }
    
    // Compressed/optimized media - read-only for authenticated users  
    match /optimized/{allPaths=**} {
      allow read: if isAuthenticated();
      // Write access only for server-side processing
    }
    
    // System assets and public content
    match /public/{allPaths=**} {
      allow read: if true; // Public read access
      // Write access only for admins (server-side)
    }
    
    // Admin uploads - restricted access
    match /admin/{allPaths=**} {
      allow read, write: if false; // All admin operations handled server-side
    }
    
    // Backup and archive storage - no client access
    match /backups/{allPaths=**} {
      allow read, write: if false; // Server-side only
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 