rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isOwnerOfResource() {
      return request.auth.uid == resource.data.userId;
    }
    
    function isOwnerOfRequest() {
      return request.auth.uid == request.resource.data.userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.uid != null && 
             request.auth.uid.size() > 0;
    }
    
    // Users collection - users can read basic profile info of others, but only write their own data
    match /users/{userId} {
      // Allow authenticated users to read basic profile information of any user
      allow read: if isValidUser();
      // Only allow users to write/update their own data
      allow write: if isValidUser() && isOwner(userId);
      allow create: if isValidUser() && isOwner(userId) && 
                    request.resource.data.keys().hasAll(['email', 'displayName', 'craftSpecialization', 'skillLevel']);
    }
    
    // Posts collection - readable by authenticated users, writable by owner
    match /craftPosts/{postId} {
      allow read: if isValidUser();
      allow create: if isValidUser() && 
                    isOwnerOfRequest() &&
                    request.resource.data.keys().hasAll(['userId', 'content', 'craftType', 'createdAt']) &&
                    request.resource.data.content.keys().hasAll(['description']) &&
                    request.resource.data.craftType is string &&
                    request.resource.data.content.description is string &&
                    request.resource.data.content.description.size() <= 1000;
      allow update: if isValidUser() && 
                    (isOwnerOfResource() || // Owner can update all fields
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'engagement', 'updatedAt']) &&
                      request.resource.data.userId == resource.data.userId) || // Any user can update likes/engagement
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['engagement', 'updatedAt']) &&
                      request.resource.data.userId == resource.data.userId)); // Any user can update comment counts
      allow delete: if isValidUser() && isOwnerOfResource();
    }
    
    // Stories collection - ephemeral content, 24-hour TTL
    match /craftStories/{storyId} {
      allow read: if isValidUser(); // All authenticated users can read active stories
      allow create: if isValidUser() && 
                    isOwnerOfRequest() &&
                    request.resource.data.userId is string &&
                    request.resource.data.author is map &&
                    request.resource.data.content is map;
      // Allow story owner to update any field OR any authenticated user to update only the 'views' field
      allow update: if isValidUser() && 
                    (isOwnerOfResource() || 
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) &&
                      request.resource.data.userId == resource.data.userId && // Prevent userId changes
                      request.resource.data.views is list)); // Ensure views is still a list
      allow delete: if isValidUser() && isOwnerOfResource();
    }
    
    // Comments collection - readable by authenticated users, writable by owner
    match /comments/{commentId} {
      allow read: if isValidUser();
      allow create: if isValidUser() && 
                    isOwnerOfRequest() &&
                    request.resource.data.keys().hasAll(['userId', 'postId', 'content', 'author', 'createdAt']) &&
                    request.resource.data.content is map &&
                    request.resource.data.content.keys().hasAll(['text']) &&
                    request.resource.data.content.text is string &&
                    request.resource.data.content.text.size() <= 500 &&
                    request.resource.data.postId is string &&
                    request.resource.data.author is map &&
                    request.resource.data.author.keys().hasAll(['id', 'displayName']);
      allow update: if isValidUser() && 
                    (isOwnerOfResource() || // Owner can update all fields
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'engagement', 'updatedAt']) &&
                      request.resource.data.userId == resource.data.userId)); // Any user can update likes/engagement
      allow delete: if isValidUser() && isOwnerOfResource();
    }
    
    // Likes collection - for tracking post likes
    match /likes/{likeId} {
      allow read: if isValidUser();
      allow create: if isValidUser() && 
                    isOwnerOfRequest() &&
                    request.resource.data.keys().hasAll(['userId', 'postId', 'createdAt']);
      allow delete: if isValidUser() && isOwnerOfResource();
    }
    
    // Follows collection - for user relationships
    match /follows/{followId} {
      allow read: if isValidUser();
      allow create: if isValidUser() && 
                    isOwnerOfRequest() &&
                    request.resource.data.keys().hasAll(['followerId', 'followedId', 'createdAt']) &&
                    request.resource.data.followerId != request.resource.data.followedId; // Can't follow yourself
      allow delete: if isValidUser() && 
                    (isOwner(resource.data.followerId) || isOwner(resource.data.followedId));
    }
    
    // Notifications collection - users can only read their own notifications
    match /notifications/{notificationId} {
      allow read: if isValidUser() && isOwner(resource.data.userId);
      allow create: if isValidUser() && 
                    request.resource.data.keys().hasAll(['userId', 'type', 'message', 'createdAt', 'read']);
      allow update: if isValidUser() && 
                    isOwner(resource.data.userId) &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'updatedAt']);
      allow delete: if isValidUser() && isOwner(resource.data.userId);
    }
    
    // Analytics collection - write-only for tracking events
    match /analytics/{analyticsId} {
      allow create: if isValidUser() && 
                    request.resource.data.keys().hasAll(['userId', 'event', 'timestamp', 'data']);
      // No read access to analytics data for privacy
    }
    
    // Reports collection - for content moderation
    match /reports/{reportId} {
      allow create: if isValidUser() && 
                    request.resource.data.keys().hasAll(['reporterId', 'contentId', 'contentType', 'reason', 'createdAt']);
      // Only admins can read reports (handled server-side)
    }
    
    // Review Requests collection - for manual review of AI scoring
    match /reviewRequests/{reviewId} {
      allow read: if isValidUser() && 
                  (isOwner(resource.data.userId) || 
                   resource.data.assignedReviewerId == request.auth.uid); // Users can read their own requests or assigned reviews
      allow create: if isValidUser() && 
                    request.resource.data.keys().hasAll(['projectId', 'userId', 'scoringId', 'reviewReason', 'status', 'priority', 'requestedAt', 'metadata']) &&
                    isOwner(request.resource.data.userId) && // Can only create reviews for own projects
                    request.resource.data.status in ['pending'] && // Can only create pending reviews
                    request.resource.data.priority in ['low', 'medium', 'high'];
      allow update: if isValidUser() && 
                    (isOwner(resource.data.userId) || // User can update their own requests
                     resource.data.assignedReviewerId == request.auth.uid) && // Assigned reviewer can update
                    request.resource.data.userId == resource.data.userId && // Prevent userId changes
                    request.resource.data.projectId == resource.data.projectId; // Prevent projectId changes
    }
    
    // Admin collection - restricted access
    match /admin/{document=**} {
      allow read, write: if false; // All admin operations handled server-side
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 